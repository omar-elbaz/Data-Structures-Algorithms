import random
import matplotlib.pyplot as plt
import heapq
from collections import deque

# Defines a Process class to hold information about each process
class Process:
    def __init__(self, id, burst, arrivalTime):
        self.id = id
        self.burst = burst
        self.arrivalTime = arrivalTime

# Generate a single process with random burst and arrival times
def generate_process(id):
    burst = random.randint(1, 5)
    arrivalTime = random.randint(1, 15)
    return Process(id, burst, arrivalTime)

# Create a dictionary of processes for simulation
def create_process_map():
    processes = {f"P{i}": generate_process(f"P{i}") for i in range(1, 11)}
    return {pid: (process.burst, process.arrivalTime) for pid, process in processes.items()}

# Plot a Gantt chart for the given scheduling results
def plot_gantt_chart(scheduling_results, title, avg_wait, avg_turnaround):
    fig, gnt = plt.subplots(figsize=(10, 6))  
    gnt.set_xlabel('Time units')
    gnt.set_ylabel('Processes')
    title_with_avgs = f"{title} - Avg Wait: {avg_wait:.2f}, Avg Turnaround: {avg_turnaround:.2f}"
    gnt.set_title(title_with_avgs)
    gnt.grid(True)

    for i, (pid, start, burst) in enumerate(scheduling_results):
        gnt.broken_barh([(start, burst)], (10 * (i + 1), 9), facecolors=('tab:orange'))

    yticks = [10 * (i + 1) + 5 for i in range(len(scheduling_results))]
    yticklabels = [pid for pid, _, _ in scheduling_results]
    gnt.set_yticks(yticks)
    gnt.set_yticklabels(yticklabels)

    plt.tight_layout(pad=3.0)  # Adjust layout to make more space
    plt.show(block=True)

# Calculate average wait time and turnaround time for FCFS scheduling
def calculate_times_fcfs(process_map):
    current_time = 0
    total_wait_time = 0
    total_turnaround_time = 0
    scheduling_results = []  
    
    for pid, (burst, arrival) in sorted(process_map.items(), key=lambda x: x[1][1]):
        if current_time < arrival:
            current_time = arrival
        wait_time = current_time - arrival
        turnaround_time = wait_time + burst
        total_wait_time += wait_time
        total_turnaround_time += turnaround_time
        scheduling_results.append((pid, current_time, burst))
        current_time += burst
    
    avg_wait_time = total_wait_time / len(process_map)
    avg_turnaround_time = total_turnaround_time / len(process_map)
    return scheduling_results, avg_wait_time, avg_turnaround_time

# Calculate average wait time and turnaround time for Round Robin scheduling
def calculate_times_rr(process_map, quantum=2):
    processes = deque(sorted(process_map.items(), key=lambda x: x[1][1]))
    current_time, total_wait_time, total_turnaround_time = 0, 0, 0
    wait_times = {pid: 0 for pid in process_map}
    last_start_time = {pid: arrival for pid, (_, arrival) in process_map.items()}
    scheduling_results = []

    while processes:
        pid, (burst, arrival) = processes.popleft()
        if current_time < arrival:
            current_time = arrival
        execution_time = min(burst, quantum)
        scheduling_results.append((pid, current_time, execution_time))  
        wait_times[pid] += current_time - last_start_time[pid]
        current_time += execution_time
        burst -= execution_time
        if burst > 0:
            processes.append((pid, (burst, current_time)))
            last_start_time[pid] = current_time
        else:
            total_turnaround_time += current_time - arrival

    total_wait_time = sum(wait_times.values())
    avg_wait_time = total_wait_time / len(process_map)
    avg_turnaround_time = total_turnaround_time / len(process_map)
    return scheduling_results, avg_wait_time, avg_turnaround_time

# Calculate average wait time and turnaround time for SRTF scheduling
def calculate_times_srtf(process_map):
    ready_queue, current_time, total_wait_time, total_turnaround_time = [], 0, 0, 0
    processes = sorted(((pid, arrival, burst) for pid, (burst, arrival) in process_map.items()), key=lambda x: x[1])
    finish_times = {}
    scheduling_results = []

    while processes or ready_queue:
        while processes and processes[0][1] <= current_time:
            pid, arrival, burst = processes.pop(0)
            heapq.heappush(ready_queue, (burst, current_time, pid))
        if ready_queue:
            burst, started_at, pid = heapq.heappop(ready_queue)
            exec_time = burst if not processes else min(burst, processes[0][1] - current_time)
            scheduling_results.append((pid, current_time, exec_time))
            current_time += exec_time
            burst -= exec_time
            if burst > 0:
                heapq.heappush(ready_queue, (burst, current_time, pid))
            else:
                finish_times[pid] = current_time
        else:
            if processes:
                current_time = processes[0][1]
    
    for pid, (burst, arrival) in process_map.items():
        finish_time = finish_times.get(pid, arrival + burst)
        total_turnaround_time += finish_time - arrival
        total_wait_time += finish_time - arrival - burst

    avg_wait_time = total_wait_time / len(process_map)
    avg_turnaround_time = total_turnaround_time / len(process_map)
    return scheduling_results, avg_wait_time, avg_turnaround_time

# Calculate, plot scheduling results, and print average times for each scheduling algorithm
def calculate_and_plot_scheduling(process_map, scheduling_type='fcfs', quantum=2):
    if scheduling_type == 'fcfs':
        scheduling_results, avg_wait, avg_turnaround = calculate_times_fcfs(process_map)
    elif scheduling_type == 'rr':
        scheduling_results, avg_wait, avg_turnaround = calculate_times_rr(process_map, quantum)
    else:  # 'srtf'
        scheduling_results, avg_wait, avg_turnaround = calculate_times_srtf(process_map)

    print(f"{scheduling_type.upper()} Average Wait Time: {avg_wait}, Average Turnaround Time: {avg_turnaround}")
    plot_gantt_chart(scheduling_results, scheduling_type.upper(), avg_wait, avg_turnaround)

# Main function to run simulations for FCFS, RR, and SRTF, plot Gantt charts, and display results
def main():
    process_map = create_process_map()
    calculate_and_plot_scheduling(process_map, 'fcfs')
    calculate_and_plot_scheduling(process_map, 'rr', quantum=2)
    calculate_and_plot_scheduling(process_map, 'srtf')

    plt.show()  # Finally, display all plots

main()